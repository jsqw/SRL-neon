program pickpocketer;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}
{$IFNDEF SKUNK_UNIVERSAL_TRANSPORT}
  {$I Includes\WaspLib\optional\handlers\teleports\transport.simba}
{$ENDIF}
{$IFNDEF CJ_BIRDHOUSE_RUNNER}
  {$I ..\Includes\BHI.simba}
{$ENDIF}

begin
  Login.PlayerIndex := 0;
end;

const
  BREAKAFTER  = 40;
  BREAKFOR    = 5;
  FOOD_AMOUNT = 20;
  FOOD_NAME   = 'Swordfish';

  BIRDHOUSES  = False;
  INTERVAL    = 0;
  SEED        = 'Asgarnian seed';


type
  TScript = record
    StartXP, CurrentXP, GainedXP, MinHP: Int32;
    RSW: TRSWalker;
    Timer: TStopwatch;
    Food: TRSItem;
    BankObject: TRSObject;
    ThievArea, BankArea: TPointArray;
    CityArea: TBox;
    ReturnSpell: ERSSpell;
  end;

var
  Bot: TScript;

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Bot.Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Bot.Timer.Resume;
  T := Task;
end;

procedure Bot.PrintProgress();
begin
  Bot.CalculateXP();
  ClearDebug();
  WriteLn('|-----------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Thieving XP    : ', Bot.GainedXP);
  WriteLn('| XP/Hour        : ', Round((Bot.GainedXP/((GetTimeRunning()/3600))), 2), ' K');
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Bot.Timer.ElapsedTime), Time_Short));
  WriteLn('|-----------------------------|');
end;

procedure Bot.KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure Bot.HealthManagement();
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if Minimap.GetHPLevel() < Bot.MinHP then
    begin
      if Inventory.ContainsItem(Bot.Food) then
        Inventory.ClickItem(Bot.Food)
      else
        TerminateScript('Could not eat food, possible out of it?');
    end;
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.THIEVING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @Bot.KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.LoseFocus);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.2, 0);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE);
  Antiban.AddBreak(12 * ONE_HOUR, 4 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Bot.InitiateScript();
var
  ArdougneBank: TPointArray := [[5987, 3297], [6015, 3297], [6015, 3330], [5987, 3330]];
  ArdougneBankBoothTile: TPoint := [6016, 3304];
  ArdougneCityArea: TBox := [5888, 3166, 6112, 3391];
begin
  if BIRDHOUSES then
  begin
    BirdHouseRunner.Setup(ERSLogType.YEW_LOGS, SEED, False, INTERVAL, False);
    BirdHouseRunner.Init();
  end;

  Mouse.Speed := SRL.NormalRange(18, 26);
  RSW.Setup();
  SetupAntiBan();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  Bot.StartXP := XPBar.Read();
  Bot.MinHP := Floor(Minimap.GetHPLevel() * 0.5);

  if Bot.RSW.InPoly(ArdougneBank) then
  begin
    WriteLn('Setting up at Ardougne Knights.');
    Bot.BankArea := ArdougneBank;
    Bot.ThievArea := ArdougneBank;
    Bot.CityArea := ArdougneCityArea;
    Bot.BankObject.SetupUpText(['Bank','Bank booth']);
    Bot.BankObject.Setup(6, [ArdougneBankBoothTile]);
    Bot.BankObject.Finder.Colors += CTS2(6251367, 1, 1.67, 1.48);
  end;

  Bot.Food := FOOD_NAME;
  Bot.Timer.Start();
end;

procedure Bot.CalculateXP();
var t: Int32;
begin
  Bot.CurrentXP := XPBar.Read();
  t         := Bot.GainedXP;
  Bot.GainedXP  := Bot.CurrentXP - Bot.StartXP;
  if Bot.GainedXP > t then
    Bot.Timer.Reset();
  if Bot.Timer.ElapsedTime > 300000 then
    TerminateScript('No Gained XP in 5 minutes!');
end;

procedure Bot.Restock();
var
  Item: TRSBankItem := [Bot.Food, FOOD_AMOUNT, False];
begin
  if not Bank.IsOpen() then
  begin
    Bot.BankObject.WalkClick(True, 3);
    WaitUntil(Bank.IsOpen(), 250, 5000);
  end;

  if not Bank.IsOpen() then
    Exit();

  Bank.DepositAll();
  WaitEx(500, 250);
  Bank.WithdrawItem(Item, True);
  WaitEx(500, 250);
  Bank.Close(60);
  WaitEx(500, 250);
end;

procedure Bot.Pickpocket();
var
  PluginColor: TCTS2Color := CTS2(16711935, 1, 0.01, 0.01);
  Pt: TPoint;
  TPA: TPointArray;
begin
  if Mainscreen.IsUpText(['Pickpocket', 'ickp', 'cket']) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WaitUntil(XPBar.WaitXP(4550), 250, 5000);
      Exit();
    end;

  if not Bot.RSW.InPoly(Bot.ThievArea) then
    Bot.RSW.WebWalk(Bot.ThievArea.Mean());

  SRL.FindColors(TPA, PluginColor, Mainscreen.Bounds());

  if TPA.Len() > 0 then
  begin
    Pt := TPA.Mean();
    Mouse.HumanMove(Pt);
    WaitEx(30, 25);

    if Mainscreen.IsUpText(['Pickpocket', 'ickp', 'cket']) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WaitUntil(XPBar.WaitXP(4550), 100, 5000);
      Exit();
    end;
  end
  else
    Bot.KeyboardRotate();

  if Bot.Timer.ElapsedTime > 30000 then
    Bot.KeyboardRotate();
end;

procedure Bot.HandlePouches();
var
  Pouches: Int32;
begin
  Pouches := Inventory.CountItemStack('Coin pouch');
  if (Pouches > 22) then
    Inventory.ClickItem('Coin pouch')
  else if ((Pouches > 5) and (SRL.Dice(10))) then
    Inventory.ClickItem('Coin pouch');
end;

procedure Bot.RunThiever();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  Bot.HealthManagement();
  Bot.HandlePouches();
  Bot.PrintProgress();

  if BIRDHOUSES then
  begin
    if BirdHouseRunner.CanDoBirdHouseRun() then
      BirdHouseRunner.DoBirdHouseRun();
  end;

  if ((Inventory.CountEmptySlots() < 2) or (Inventory.CountItem(Food) = 0)) then
    Bot.Restock()
  else
    Bot.PickPocket();
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  i : Int32;
  bankTimeout : TCountdown;
  transporter: TUniversalTransport;
begin
  Writeln("Calling the OnStart method!");
  ScriptWalker := @Bot.RSW;

  for i := 0 to High(Antiban.Tasks) do
  begin
    Antiban.Tasks[i].Countdown.Pause();
  end;

  bankTimeout.Init(30000);

  while not bankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    Bot.BankObject.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 2000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit(false);
  end;

  if Inventory.CountEmptySlots() < 28 then
  begin
    Bank.DepositAll();
    WaitUntil(Inventory.CountEmptySlots() = 28, 150, 2000);

    //If we can't get our stuff then bail
    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositAll();
      Bank.Close();
      BirdhouseRunner.IsDisabled := true;
      Exit(false);
    end;

    WaitEx(325, 250);

    Bank.Close(60);
  end;

  Result := true;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  transporter: TUniversalTransport;
  i : Int32;
  bankTimeout: TCountdown;
begin
  Self.DebugLn("Birdhouse Include, OnComplete");

  ScriptWalker := @Bot.RSW;

  {transporter.Run(RSTeleports.MINIGAME_GUARDIANS_OF_THE_RIFT);
  WaitUntil(Bot.IsInLobby(), 500, 25000);

  if not Bot.IsInLobby() then
  begin
    transporter.Run(RSTeleports.MINIGAME_GUARDIANS_OF_THE_RIFT);
    WaitUntil(Bot.IsInLobby(), 500, 25000);
  end

  bankTimeout.Init(30000);}

  while not bankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    Bot.BankObject.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 2000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit();
  end;

  Bank.DepositAll();
  WaitEx(250, 200);
  Bank.Close(50);

  for i := 0 to High(Antiban.Tasks) do
  begin
    Antiban.Tasks[i].Countdown.Resume();
  end;
end;

begin
  Bot.InitiateScript();
  repeat
    begin
      Bot.RunThiever();
      WaitEx(250, 225);
    end;
  until false;
end.