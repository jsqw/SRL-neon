program pollnivneach;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 0;
end;

var
  Food: TRSItem := 'Cake';
  HpToEatAt: Int32 := 8;
  StartTileArray: TPointArray := [[1430, 236], [1434, 236], [1438, 236], [1442, 236],
                                  [1430, 240], [1434, 240], [1438, 240], [1442, 240]];
  RSW: TRSWalker;
  Step: Int32;
  Timer: TStopwatch;
  StartXP: Int32;
  CurrentXP: Int32;
  GainedXP: Int32 := 0;
  HLColor: TCTS2Color :=  CTS2(2736990, 28, 0.21, 1.27);
  ObstacleArray: TPointArray := [[1426, 240], [1426, 240], [1286, 520],
                                 [1316, 490], [1342, 490],
                                 [1362, 490],  [1350, 468],
                                 [1166, 726], [1174, 678], [1186, 658]];
  AreaArray: TBoxArray := [[1466, 88, 1488, 104], // course ending tiles
                           [1330, 10, 1555, 300], // whole city
                           [1265, 520, 1303, 553],
                           [1294, 489, 1318, 515],
                           [1324, 477, 1345, 496],
                           [1350, 489, 1379, 513],
                           [1342, 458, 1375, 477],
                           [1146, 716, 1199, 753],
                           [1150, 674, 1225, 715],
                           [1145, 637, 1195, 671]];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn('|-----------------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Agility XP     : ', GainedXP);
  WriteLn('| XP/Hour        : ', Round((GainedXP/((GetTimeRunning()/3600))), 2), ' K');
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('|-----------------------------------|');
end;

// A custom Keyboard version of Antiban.RandomRotate()
// Rotating with mouse3 doesn't work well with RuneLite
procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure HealthManagement();
begin
  if (Minimap.GetHPLevel() < HpToEatAt) then
    begin
      if Inventory.ContainsItem(Food) then
        Inventory.ClickItem(Food)
      else
        TerminateScript('Could not eat food, possible out of it?');
    end;
end;

procedure TAntiban.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(800,3500);
  Self.LoseFocus(T);
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.AGILITY, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2,   @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*5,   @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*3,   @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE*8,   @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25,  @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.2, 0);
  Antiban.AddBreak(40 * ONE_MINUTE, 6 * ONE_MINUTE);
  Antiban.AddBreak(12 * ONE_HOUR, 6 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure InitiateScript();
begin
  RSW.Setup('agility');
  RSGroundItems.Setup();
  SetupAntiBan();
  if (not RSClient.IsLoggedIn()) then 
    Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if (GainedXP > t) then 
    Timer.Reset();
  if (Timer.ElapsedTime > 300000) then 
    TerminateScript('No Gained XP in 5 minutes!')
end;

function GetStep(): Int32;
var
  pos: TPoint;
  i: Int32;
begin
  pos := RSW.GetMyPos();
  for i := 0 to High(AreaArray) do
    if AreaArray[i].Contains(pos) then Exit(i);
  Exit(-1);
end;

procedure StartStep();
var
  Rect: TRectangle;
  TPA: TPointArray;
  XP: Int32;
  GoalTile: TPoint;
  CurrentTile: TPoint;
  Path: TPointArray;
  Bds: TBox;
begin
  RSClient.Image.Clear();
  CalculateXP();
  PrintProgress();
  CurrentTile := RSW.GetMyPos();
  GoalTile := StartTileArray.RandomValue();
  Path := [[1470, 108], [1474, 152], [1474, 192], [1454, 220], [1442, 240], GoalTile];
  RSW.WalkPath(Path);
  WaitEx(150, 25);
  Rect := RSW.GetTileMs(ObstacleArray[0]);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  RSClient.Image.DrawBox(Bds, clWhite);
  SRL.FindColors(TPA, HLColor, Bds);
  if TPA.Len() > 0 then
  begin
    RSClient.Image.DrawTPA(TPA, clRed);
    XP := XPBar.Read();
    Mouse.HumanMove(TPA.Mean());
    WaitEx(50, 25);
    if MainScreen.IsUpText('Climb') then
      begin
        Mouse.Click(MOUSE_LEFT);
        WaitUntil(XPBar.Read > XP, 200, 10000);
        WaitEx(550, 25);
        Exit();
      end
    else KeyboardRotate();
    WriteLn('Unable to find next obstacle!');
    Exit();
  end;
end;

procedure NormalStep(Step: Int32);
var
  Pos: TPoint;
  Rect: TRectangle;
  TPA: TPointArray;
  XP, HP: Int32;
  graceATPA: T2DPointArray;
  GoalTile: TPoint;
  Bds: TBox;
  UpText: String;
begin
  RSClient.Image.Clear();
  GoalTile := StartTileArray.RandomValue();
  Pos := RSW.GetMyPos();

  if (Step = 1) then
    if (Pos.DistanceTo(GoalTile) > 20) then
      RSW.WalkBlind(GoalTile);


  // pollnivneach course start room has items on ground and similar colored windows to mog
  if (Step > 1) then
    begin
      RSGroundItems.MarkOfGrace.Find(graceATPA);
      if RSGroundItems.MarkOfGrace.Find(graceATPA) then
        if AreaArray[Step].Contains(RSGroundItems.MarkOfGrace.ClosestDot) then
          begin
            RSGroundItems.MarkOfGrace.Click(true, 1);
            Wait(2000, 2500);
          end;
    end;

  Rect := RSW.GetTileMs(ObstacleArray[Step]);
  Rect := Rect.Expand(12);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  RSClient.Image.DrawBox(Bds, clWhite);
  SRL.FindColors(TPA, HLColor, Bds);
  if TPA.Len() > 0 then
  begin
    RSClient.Image.DrawTPA(TPA, clRed);
    XP := XPBar.Read();
    HP := Minimap.GetHPLevel();
    Mouse.HumanMove(TPA.Mean());
    WaitEx(50, 25);
    UpText := Mainscreen.GetUpText();
    if UpText.ContainsAny(['Climb', 'Jump', 'Grab', 'Balance', 'Cross', 'Leap', 'Hurdle', 'Vault', 'Jump-off']) then
      begin
        Mouse.Click(MOUSE_LEFT);
        WaitUntil(((XPBar.Read > XP) or (HP < Minimap.GetHPLevel())), 200, 10000);
        if UpText.Contains('ightrope') then
          Wait(500);
        WaitEx(250, 25);
        Exit();
      end;
    KeyboardRotate();
    WriteLn('Unable to find next obstacle!');
  end
  else KeyboardRotate();
end

begin
  InitiateScript();
  repeat
    begin
      if (not RSClient.IsLoggedIn()) then
        Login.LoginPlayer();
      CalculateXP();
      Antiban.DoAntiban();
      HealthManagement();
      Step := GetStep();
      if (Step = 0) then 
        StartStep();
      else if (Step > 0) 
        then NormalStep(Step);
      WaitEx(445, 125);
    end;
  until false;
end.