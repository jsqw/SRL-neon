program alkharid;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 1;
end;

var
  FoodItem: TRSItem := 'Cake';
  HealthThreshold: Int32 := 7;
  StartTiles: TPointArray := [[92, 352], [96, 352], [100, 352],
                              [92, 356], [96, 356], [100, 356]];
  RSW: TRSWalker;
  Timer: TStopwatch;
  Step: Int32 := 0;
  StartXP: Int32 := 0;
  GainedXP: Int32 := 0;
  CurrentXP: Int32 := 0;
  HighlightColor: TCTS2Color := CTS2(3063384, 28, 0.18, 1.41);
  Obstacles: TPointArray := [[96, 368], [706, 432], [688, 490],
                             [825, 502], [825, 502],
                             [456, 352],  [584, 420], [868, 412],
                             [816, 383]];
  Areas: TBoxArray := [[18, 300, 316, 525], [690, 380, 741, 443],
                       [657, 451, 720, 520], [737, 445, 785, 534],
                       [784, 472, 836, 531], [423, 349, 468, 391],
                       [559, 424, 605, 460], [856, 405, 903, 444],
                       [784, 367, 849, 425]];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn('|------------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Agility exp    : ', GainedXP);
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('|------------------------------|');
end;

procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure TAntiban.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(800,3500);
  Self.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Self.LoseFocus(T);
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.AGILITY, ERSSKILL.TOTAL];

  Antiban.AddTask(ONE_MINUTE*2,   @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*5,   @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*6,   @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE*7,   @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*8,   @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25,  @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.9, 0);
  Antiban.AddBreak(40 * ONE_MINUTE, 7 * ONE_MINUTE, 0.8, 1);
  Antiban.AddBreak(12 * ONE_HOUR, 5 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure InitiateScript();
begin
  RSW.Setup('agility');
  RSGroundItems.Setup();
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if (GainedXP > t) then
    Timer.Reset();
  if (Timer.ElapsedTime > 300000) then
    TerminateScript('No Gained XP in 5 minutes!')
end;

function GetStep(): Int32;
var
  pos: TPoint;
  i: Int32;
begin
  pos := RSW.GetMyPos();
  for i := 0 to High(Areas) do
    if Areas[i].Contains(pos) then
      Exit(i);
  Exit(-1);
end;

procedure HealthManagement();
begin
  if (Minimap.GetHPLevel() < HealthThreshold) then
    begin
      if Inventory.ContainsItem(FoodItem) then
        Inventory.ClickItem(FoodItem)
      else
        TerminateScript('Could not eat food!');
    end;
end;

procedure StartStep();
var
  Pos, GoalTile: TPoint;
  Rect: TRectangle;
  TPA: TPointArray;
  XP: Int32;
  Bds: TBox;
begin
  RSClient.Image.Clear();
  Pos := RSW.GetMyPos();
  GoalTile := StartTiles.RandomValue();

  if (Pos.DistanceTo(GoalTile) > 20) then
  begin
    RSW.WalkBlind(GoalTile);
    WaitEx(250, 50);
  end;

  Rect := RSW.GetTileMs(Obstacles[0]);
  Rect := Rect.Expand(30);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  RSClient.Image.DrawBox(Bds, clWhite);

  SRL.FindColors(TPA, HighlightColor, Bds);

  if TPA.Len() > 0 then
  begin
    RSClient.Image.DrawTPA(TPA, clRed);
    XP := XPBar.Read();
    Mouse.HumanMove(TPA.Mean());
    WaitEx(50, 25);

    if MainScreen.IsUpText('Climb') then
    begin
      Mouse.Click(MOUSE_LEFT);
      WaitUntil(XPBar.Read() > XP, 200, 10000);
      WaitEx(350, 50);
      Exit();
    end;
  end;
  KeyboardRotate();
end;

procedure NormalStep(Step: Int32);
var
  GoalTile: TPoint;
  Rect: TRectangle;
  TPA: TPointArray;
  UpText: String;
  XP: Int32;
  Bds: TBox;
  graceATPA: T2DPointArray;
  Tiles: TPointArray := [[804, 494], [808, 494], [812, 494], [804, 498], [808, 498], [812, 498]];
begin
  RSClient.Image.Clear();
  RSGroundItems.MarkOfGrace.Find(graceATPA);
  if RSGroundItems.MarkOfGrace.Find(graceATPA) then
    if Areas[Step].Contains(RSGroundItems.MarkOfGrace.ClosestDot) then
    begin
      RSGroundItems.MarkOfGrace.Click(True, 1);
      Wait(2000, 3500);
    end;

  if Step = 3 then
    begin
      GoalTile := Tiles.Randomvalue();
      RSW.WalkBlind(GoalTile);
      WaitEx(450, 350);
    end;

  Rect := RSW.GetTileMs(Obstacles[Step]);
  Rect := Rect.Expand(30);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  SRL.FindColors(TPA, HighlightColor, Bds);
  RSClient.Image.DrawBox(Bds, clWhite);

  if TPA.Len() > 0 then
  begin
    RSClient.Image.DrawTPA(TPA, clRed);
    XP := XPBar.Read();
    Mouse.HumanMove(TPA.Mean());
    WaitEx(50, 45);
    UpText := Mainscreen.GetUpText();

    if UpText.ContainsAny(['Climb', 'Jump', 'Balance', 'Cross', 'Teeth', 'Swing', 'Vault']) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WaitUntil(((XPBar.Read > XP) or Areas[0].Contains(RSW.GetMyPos())), 200, 10000);
      if UpText.Contains('ightrope') then
        Wait(400);
      WaitEx(650, 325);
      Exit();
    end;
  end;
  KeyboardRotate();
end;

begin
  InitiateScript();
  repeat
    begin
      Antiban.DoAntiban();
      if not RSClient.IsLoggedIn() then
        Login.LoginPlayer();
      HealthManagement();
      Step := GetStep();
      CalculateXP();
      PrintProgress();
      if (Step = 0) then
        StartStep()
      else if (Step > 0) then
        NormalStep(Step);
      WaitEx(250, 200);
    end;
  until false;
end.