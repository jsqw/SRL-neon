program draynor;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 1;
end;

var
  Food: TRSItem := 'Lobster';
  HpToEatAt: Int32 := 8;
  StartTileArray: TPointArray := [[816, 102], [820, 102], [824, 102],
                                  [816, 106], [820, 106], [824, 106]];
  RSW: TRSWalker;
  Step: Int32;
  Timer: TStopwatch;
  StartXP: Int32;
  CurrentXP: Int32;
  GainedXP: Int32 := 0;
  HLColor: TCTS2Color :=  CTS2(2400797, 13, 0.18, 2.39);
  ObstacleArray: TPointArray := [[816, 98], [536, 98], [510, 102],
                                 [500, 150], [496, 182],
                                 [524, 186],  [550, 162]];
  AreaArray: TBoxArray := [[675, 45, 891, 245], // whole draynor
                           [529, 79, 556, 102],
                           [481, 88, 525, 121],
                           [493, 128, 529, 151],
                           [489, 159, 501, 182],
                           [489, 182, 525, 190],
                           [525, 160, 552, 186]];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn("| ~   draynor hopper v0.01   ~ |");
  WriteLn('| -----------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Agility exp    : ', GainedXP);
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('| -----------------------------|');
end;

// A custom Keyboard version of Antiban.RandomRotate()
// Rotating with mouse3 doesn't work well with RuneLite
procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure TAntiban.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(800,3500);
  Self.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Self.LoseFocus(T);
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.AGILITY, ERSSKILL.TOTAL];

  Antiban.AddTask(ONE_MINUTE*2,   @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*5,   @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*3,   @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE*8,   @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25,  @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.2, 0);
  Antiban.AddBreak(33 * ONE_MINUTE, 9 * ONE_MINUTE);
  Antiban.AddBreak(10 * ONE_HOUR, 8 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure InitiateScript();
begin
  RSW.Setup('agility');
  RSGroundItems.Setup();
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if GainedXP > t then Timer.Reset();
  if Timer.ElapsedTime > 300000 then TerminateScript('No Gained XP in 5 minutes!')
end;

function GetStep(): Int32;
var
  pos: TPoint;
  i: Int32;
begin
  CalculateXP();
  pos := RSW.GetMyPos();
  for i := 0 to High(AreaArray) do
    if AreaArray[i].Contains(pos) then Exit(i);
  Exit(-1);
end;

procedure StartStep();
var
  Pt: TPoint;
  Rect: TRectangle;
  TPA: TPointArray;
  XP: Int32;
  GoalTile: TPoint;
  CurrentTile: TPoint;
begin
  PrintProgress();
  CurrentTile := RSW.GetMyPos();
  GoalTile := StartTileArray.RandomValue();
  RSW.WalkBlind(GoalTile);
  WaitEx(250, 50);
  Rect := RSW.GetTileMs(ObstacleArray[0]);
  Rect := Rect.Expand(30);
  SRL.FindColors(TPA, HLColor, Rect.Bounds());
  if TPA.Len() > 0 then
  begin
    XP := XPBar.Read();
    Pt := SRL.rowp(TPA.Mean(), TPA.Bounds());
    Mouse.HumanMove(Pt);
    WaitEx(250, 25);
    if MainScreen.IsUpText('Climb') then
      begin
        Mouse.Click(MOUSE_LEFT);
        WaitUntil(XPBar.Read > XP, 200, 10000);
        WaitEx(350, 50);
        Exit();
      end
    else KeyboardRotate();
    WriteLn('Unable to find next obstacle!');
    Exit();
  end;
end;

procedure NormalStep(Step: Int32);
var
  Pt: TPoint;
  Rect: TRectangle;
  TPA: TPointArray;
  XP: Int32;
  graceATPA: T2DPointArray;
  GoalTile: TPoint;
begin
  RSGroundItems.MarkOfGrace.Find(graceATPA);
  if RSGroundItems.MarkOfGrace.Find(graceATPA) then
    if AreaArray[Step].Contains(RSGroundItems.MarkOfGrace.ClosestDot) then
      begin
          RSGroundItems.MarkOfGrace.Click(true, 1);
          Wait(2000, 2500);
      end;

  Rect := RSW.GetTileMs(ObstacleArray[Step]);
  Rect := Rect.Expand(30);
  SRL.FindColors(TPA, HLColor, Rect.Bounds());
  if TPA.Len() > 0 then
  begin
    XP := XPBar.Read();
    Pt := SRL.rowp(TPA.Mean(), TPA.Bounds());
    Mouse.HumanMove(Pt);
    WaitEx(250, 25);
    if MainScreen.IsUpText(['Climb', 'Jump', 'Balance', 'Cross', 'Leap', 'Hurdle', 'Vault', 'Jump-off']) then
      begin
        Mouse.Click(MOUSE_LEFT);
        WaitUntil(((XPBar.Read > XP) or AreaArray[0].Contains(RSW.GetMyPos())), 200, 10000);
        WaitEx(450, 50);
        Exit();
      end
    else KeyboardRotate();
    WriteLn('Unable to find next obstacle!');
    Exit();
  end;
end

begin
  InitiateScript();
  repeat
    begin
      Antiban.DoAntiban();
      if not RSClient.IsLoggedIn() then Login.LoginPlayer();
      if Minimap.GetHPLevel < HpToEatAt then Inventory.ClickItem(Food);
      Step := GetStep();
      if Step < 0 then WriteLn('Unknown Step!');
      if Step = 0 then StartStep();
      if Step > 0 then NormalStep(Step);
      WaitEx(250, 25);
    end;
  until false;
end.
