program graveyardroom;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 0;
end;

const
  BREAKAFTER  = 40;
  BREAKFOR    = 7;

var
  FOOD         : TRSItem      := 'Shark';
  RSW          : TRSWalker;
  State        : String;
  FL, HP       : Int32;
  FRUITININVY  : Boolean;
  RINGS        : TRSItemArray := ['Ring of dueling(1)', 'Ring of dueling(2)',
                                  'Ring of dueling(3)', 'Ring of dueling(4)',
                                  'Ring of dueling(5)', 'Ring of dueling(6)',
                                  'Ring of dueling(7)', 'Ring of dueling(8)'];
  R8           : TRSBankItem := ['Ring of dueling(8)', 1, false];
  FW           : TRSBankItem := [FOOD, 2, false];
  JoinTile     : TPoint      := [268, 110];
  PoolTile     : TPoint      := [668, 144];
  CGROOM       : TPointArray := [[696, 391], [952, 390], [952, 650], [692, 648]];
  DUELARENA    : TPointArray := [[47, 73], [335, 73], [340, 339], [49, 343]];
  FEROX        : TPointArray := [[625, 119], [765, 100], [760, 200], [621, 229]];
  STATUEAREA   : TPointArray := [[258, 86], [280, 86], [291, 96], [290, 116], [278, 129], [279, 141], [261, 141], [261, 129], [250, 118], [250, 96]];
  MTALOBBY     : TPointArray := [[241, 159], [241, 145], [251, 145], [260, 141], [268, 141], [275, 141], [283, 143], [297, 145], [298, 171], [282, 171], [282, 184], [256, 185], [256, 170], [241, 169]];
  MTAYARD      : TPointArray := [[255, 188], [285, 188], [286, 217], [255, 216]];
  POOLAREA     : TPointArray := [[636, 133], [679, 134], [680, 170], [637, 169]];
  FIREALTAR    : TPointArray := [[49, 227], [109, 227], [109, 287], [49, 287]];
  FEROXTELE    : TPointArray := [[730, 136], [749, 137], [748, 155], [731, 155]];
  Timer        : TStopwatch;
  StartXP      : Int32;
  CurrentXP    : Int32;
  GainedXP     : Int32 := 0;
  FRUIT        : TRSItem      := 'Banana';


procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn('| MTA by n0ll v1.1            |');
  WriteLn('| The Creature Graveyard      |');
  WriteLn('| ----------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Magic exp      : ', GainedXP);
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('| ----------------------------|');
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.MAGIC, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Downloader(const URL, Filename: string);
var Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure InitiateScript();
begin

  if (not DirectoryExists(AppPath+'\MTA\')) then
    CreateDirectory(AppPath+'\MTA');

  if (not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png')) then
    Downloader('https://i.imgur.com/yRapvnM.png', AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png');

  if (not FileExists(AppPath+'\MTA\mta.properties')) then
    Downloader('https://github.com/jsqw/SRL-neon/blob/main/mta/runelite.properties',
    AppPath+'\MTA\mta.properties');

  RSW.Setup('mta');
  SRL.Setup();
  SetupAntiBan();
  if (not RSClient.IsLoggedIn()) then
    Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

function SuppliesReady(): boolean;
begin
  if(Inventory.ContainsAny(RINGS) and Inventory.ContainsItem(FOOD)) then
    Exit(true)
  else
    Exit(false);
end;

procedure TeleportToFireAltar();
begin
  PrintProgress();
  Equipment.ClickItem('Ring of the elements', 'Fire Altar');
  Antiban.DoAntiban();
  WaitUntil(FIREALTAR.Bounds().Contains(RSW.GetMyPos()), 100, 10000);
end;

procedure UseRestorationPool();
var
  TPA  : TPointArray;
  Pt   : TPoint;
  Area : TRectangle;
  Box  : TBox;
begin
  Area := RSW.GetTileMS([648, 148]);
  Area := Area.Expand(12);
  Box := Area.Bounds();
  Box.LimitTo(Mainscreen.Bounds());
  SRL.FindColors(TPA, CTS0(11644782, 20), Box);
  if (TPA.Len > 0) then
    begin
      Pt := SRL.rowp(Mouse.Position(), TPA.Bounds());
      Mouse.HumanMove(Pt);
      Wait(20, 120);
      if (not Mainscreen.IsUpText('Drink')) then Antiban.RandomRotate()
      else
        begin
          Mouse.Click(MOUSE_LEFT);
          WaitUntil((Minimap.GetHPPercent = 100), 500, 20000);
        end;
    end;
end;

procedure OpenBank();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(16745203, 0), Mainscreen.Bounds());
  if (TPA.Len < 1) then Exit;
  Mouse.HumanMove(TPA.Mean());
  Wait(25, 75);
  if MainScreen.IsUpText('Use Bank') then Mouse.Click(MOUSE_LEFT);
  WaitUntil(Mainscreen.HasInterface(), 50, 5000);
  Wait(1000, 2000);
end;

procedure GetItemsFromBank();
begin
  if (not Mainscreen.HasInterface()) then OpenBank();
  WaitUntil(Mainscreen.HasInterface(), 50, 5000);
  if (not Mainscreen.HasInterface()) then Exit;
  if (not Inventory.ContainsAny(RINGS)) then Bank.WithDrawItem(R8, false);
  Wait(100, 200);
  if (not Inventory.ContainsItem(FOOD)) then
    begin
      if Bank.ContainsItem(FOOD) then Bank.WithdrawItem(FW, false)
      else TerminateScript('Out of food!');
    end;
  Wait(100, 200);
  Bank.Close(True);
  Wait(2000, 3000);
end;

procedure EnterMTADoor();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(255, 0), Mainscreen.Bounds());
  if (not TPA.Len > 0) then Antiban.RandomRotate()
  else
    begin
      Mouse.HumanMove(TPA.Mean());
      Wait(25, 75);
      if (Mainscreen.IsUpText('Enter')) then Mouse.Click(MOUSE_LEFT)
      else Antiban.RandomRotate();
    end;
  Wait(2750, 3250);
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if GainedXP > t then Timer.Reset();
  if Timer.ElapsedTime > 300000 then TerminateScript('No Gained XP in 5 minutes!');
end;

procedure TravelToYard();
begin
  RSW.WalkBlind([268, 202]);
  Antiban.DoAntiban();
end;

procedure TravelToPool();
begin
  RSW.WalkBlind(PoolTile);
  Antiban.DoAntiban();
end;

procedure TravelToJoinTile();
begin
  RSW.WalkBlind(JoinTile);
  Antiban.DoAntiban();
end;

procedure RestoreAndBank();
begin
  if (not SuppliesReady()) then
    begin
      GetItemsFromBank();
      Exit();
    end;
  UseRestorationPool();
  Wait(100,200);
  TeleportToFireAltar();
  WaitUntil(FIREALTAR.Bounds().Contains(RSW.GetMyPos()), 500, 10000);
end;

procedure SetCompassWest();
var Pt: TPoint;
begin
  Pt := Minimap.GetCompassCircle().Mean();
  Pt := [Pt.X+Random(-2, 2), Pt.Y+Random(-2, 2)];
  Mouse.HumanMove(Pt);
  WaitEx(100, 20);
  Mouse.Click(MOUSE_RIGHT);
  ChooseOption.Select('Look West');
end;

procedure ClickBonePile();
var TPA: TPointArray;
begin
  if MainScreen.IsUpText('Grab') then
    Mouse.Click(MOUSE_LEFT)
  else
    begin
      SRL.FindColors(TPA, CTS0(16133, 0) , Mainscreen.Bounds());
      if (TPA.Len > 0) then
        begin
          Mouse.HumanMove(TPA.Mean());
          Wait(25, 75);
          if MainScreen.IsUpText('Grab') then Mouse.Click(MOUSE_LEFT);
        end
      else SetCompassWest();
    end;
end;

procedure DepositFruit();
var TPA: TPointArray;
begin
  PrintProgress();
  SRL.FindColors(TPA, CTS0(16745203, 0) , Mainscreen.Bounds());

  if (TPA.Len < 1) then
    Exit();

  Mouse.HumanMove(TPA.Mean());
  Wait(25, 75);
  if MainScreen.IsUpText('Deposit') then
    begin
      Mouse.Click(MOUSE_LEFT);
      XPBar.WaitXP(2000);
    end
  else
    SetCompassWest();
end;

function GetState(): string;
var Pos: TPoint;
begin
  Antiban.DoAntiban(false, false);
  Pos := RSW.GetMyPos();
  HP  := Minimap.GetHPLevel();
  FL  := Inventory.CountItem(FOOD);
  FRUITININVY := Inventory.ContainsItem(FRUIT);
  CalculateXP();
  if POOLAREA.Bounds.Contains(Pos) then Exit('POOLAREA');
  if CGROOM.Bounds.Contains(Pos) then Exit('CGROOM');
  if MTALOBBY.Bounds.Contains(Pos) then Exit('MTALOBBY');
  if MTAYARD.Bounds.Contains(Pos) then Exit('MTAYARD');
  if FEROXTELE.Bounds.Contains(Pos) then Exit('FEROXTELE');
  if FEROX.Bounds.Contains(Pos) then Exit('FEROX');
  if STATUEAREA.Bounds.Contains(Pos) then Exit('STATUEAREA');
  if FIREALTAR.BOUNDS.Contains(Pos) then Exit('FIREALTAR');
  if DUELARENA.Bounds.Contains(Pos) then Exit('DUELARENA');
  Exit('UNKNOWN');
end;

procedure TeleportToFerox();
begin
  Inventory.ClickSlot(0);
  WaitUntil(Chat.ClickOption('Ferox', false), 50, 3000);
  WaitUntil(FEROX.Bounds.Contains(RSW.GetMyPos()), 500, 20000);
  Antiban.DoAntiban();
end;

procedure ClickGuardian();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(10157824, 0), Mainscreen.Bounds());
  if (TPA.Len > 0) then
    begin
      Mouse.HumanMove(TPA.Mean());
      Wait(20, 120);
      if (not Mainscreen.IsUpText('Enter Grave')) then Antiban.RandomRotate()
      else
        begin
          Mouse.Click(MOUSE_LEFT);
          WaitUntil(CGROOM.Bounds.Contains(RSW.GetMyPos()), 200, 20000);
        end;
    end;
end;

procedure WalkFromAltar();
var Path: TPointArray := [[103, 255], [128, 252], [162, 247], [201, 249], [225, 244], [263, 239], [265, 220], [269, 194], [268, 222]];
begin
  RSW.WalkPath(Path);
  Wait(1000, 2000);
  Antiban.DoAntiban();
end;

procedure WalkThroughFerox();
var Path: TPointArray := [[737, 163], [717, 168], [689, 168], [677, 168], [671, 156]];
begin
  RSW.WalkPath(Path);
  Wait(1000, 2000);
end;

procedure EnterRoom();
begin
  Antiban.DoAntiban();
  if (not SuppliesReady()) then TeleportToFerox()
  else ClickGuardian();
end;

procedure ExitRoom();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(65530, 0), Mainscreen.Bounds());
  if (not TPA.Len > 0) then Antiban.RandomRotate()
  else
    begin
      Mouse.HumanMove(TPA.Mean());
      Wait(25, 75);
      if (Mainscreen.IsUpText('Exit')) then Mouse.Click(MOUSE_LEFT)
      else Antiban.RandomRotate();
    end;
  Wait(125, 250);
end;

function HaveEnoughBones(): boolean;
var InfoArea: TBox := [7, 300, 40, 331];
begin
  if (SRL.CountColor(CTS0(65280, 0), InfoArea) > 25) then Exit(true)
  else Exit(false);
end;

procedure SolveRoom();
begin
  if FRUITININVY then
    DepositFruit()
  else if ((HP < 12) and (FL < 1)) then
    ExitRoom()
  else if ((HP < 12) and (FL > 0)) then
    Inventory.ClickItem(FOOD)
  else if HaveEnoughBones then
    Magic.CastSpell(ERSSpell.BONES_TO_BANANAS)
  else
    ClickBonePile();
end;

begin
  InitiateScript();
  repeat
    begin
    if not RSClient.IsLoggedIn() then Login.LoginPlayer();
    State := GetState();
    case State of
      'CGROOM'     : SolveRoom();
      'DUELARENA'  : TravelToYard();
      'FEROX'      : TravelToPool();
      'STATUEAREA' : EnterRoom();
      'MTALOBBY'   : TravelToJoinTile();
      'MTAYARD'    : EnterMTADoor();
      'POOLAREA'   : RestoreAndBank();
      'FIREALTAR'  : WalkFromAltar();
      'FEROXTELE'  : WalkThroughFerox();
      'UNKNOWN'    : ExitRoom();
    end;
    Wait(125, 775);
    end;
  until false;
end.
