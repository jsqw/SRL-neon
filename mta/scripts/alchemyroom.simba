program alchemyroom;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}


  // HERE YOU CAN EDIT WHICH ACCOUNT YOU WANT TO USE.
  // FIRST ACCOUNT IN credentials.simba MEANS Login.PlayerIndex := 0
begin
  Login.PlayerIndex := 0;
end;

const
  BREAKAFTER  = 33;
  BREAKFOR    = 12;

var
  RSW: TRSWalker;
  State: String;
  Timer: TStopwatch;
  StartXP: Int32;
  CurrentXP: Int32;
  GainedXP: Int32 := 0;
  JoinTile: TPoint := [268, 110];
  MidTile: TPoint := [450, 625];
  STATUEAREA: TPointArray := [[258, 86], [280, 86], [291, 96],
                              [290, 116], [278, 129], [279, 141],
                              [261, 141], [261, 129], [250, 118],
                              [250, 96]];
  MTALOBBY: TPointArray := [[241, 159], [241, 145], [251, 145], [260, 141],
                            [268, 141], [275, 141], [283, 143], [297, 145],
                            [298, 171], [282, 171], [282, 184], [256, 185],
                            [256, 170], [241, 169]];
  APROOM: TPointArray := [[352, 523], [563, 522], [556, 765], [354, 764]];


procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn('| MTA by n0ll v1.2            |');
  WriteLn('| The Alchemist''s Playground  |');
  WriteLn('| ----------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Magic exp      : ', GainedXP);
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('| ----------------------------|');
end;


// Thanks to Flight for helping with this.
function TRSItemInterface.CountStack(item: TRSItem): Int32; override;
var
  box: TBox;
begin
  inherited;
  Result := -1;
  if Self.Find([item], box) then
  begin
    box.X2 := box.X1 + 35;
    box.Y2 := box.Y1 + 7;
    Result := SRL.GetItemAmount(box);
  end;
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.MAGIC];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.LoseFocus);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.2, 0);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Downloader(const URL, Filename: string);
var Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure InitiateScript();
begin

  if (not DirectoryExists(AppPath+'\MTA\')) then
    CreateDirectory(AppPath+'\MTA');

  if (not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png')) then
    Downloader('https://i.imgur.com/yRapvnM.png', AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png');

  if (not FileExists(AppPath+'\MTA\mta.properties')) then
    Downloader('https://github.com/jsqw/SRL-neon/blob/main/mta/runelite.properties ',
    AppPath+'\MTA\mta.properties');

  RSW.Setup('mta');
  SRL.Setup();
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if GainedXP > t then Timer.Reset();
  if Timer.ElapsedTime > 300000 then TerminateScript('No Gained XP in 5 minutes!');
end;

function GetState(): string;
var Pos: TPoint;
begin
  CalculateXP();
  Pos := RSW.GetMyPos();
  if APROOM.Bounds.Contains(Pos) then Exit('INROOM');
  if STATUEAREA.Bounds.Contains(Pos) then Exit('STATUEAREA');
  if MTALOBBY.Bounds.Contains(Pos) then Exit('MTALOBBY');
  Exit('UNKNOWN');
end;

procedure EnterRoom();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(16713755, 0), Mainscreen.Bounds());
  if (TPA.Len > 0) then
    begin
      Mouse.HumanMove(TPA.Mean());
      Wait(20, 120);
      if (not Mainscreen.IsUpText('Enter Alch')) then Antiban.RandomRotate()
      else
        begin
          Mouse.Click(MOUSE_LEFT);
          Wait(3000, 5000);
          Exit;
        end;
    end;
  Antiban.RandomRotate();
end;

procedure ExitRoom();
var TPA: TPointArray;
begin
  SRL.FindColors(TPA, CTS0(65530, 0), Mainscreen.Bounds());
  if (not TPA.Len > 0) then Antiban.RandomRotate()
  else
    begin
      Mouse.HumanMove(TPA.Mean());
      Wait(25, 75);
      if (Mainscreen.IsUpText('Exit')) then Mouse.Click(MOUSE_LEFT)
      else Antiban.RandomRotate();
    end;
  Wait(125, 250);
end;

procedure ClickArrowOnMs();
var
  TPA: TPointArray;
  Box: TBox;
  Pt: TPoint;
begin
  if Mainscreen.IsUpText('Cast') then Mouse.Click(MOUSE_LEFT);
  WaitUntil(Mainscreen.FindArrow(TPA), 50, 3000);
  if (TPA.Len > 0) then
    begin
      Mouse.HumanMove(TPA.Last);
      Wait(50, 125);
      if Mainscreen.IsUpText('Cupboard') then
        begin
          Pt := Mouse.Position();
          Mouse.Click(MOUSE_LEFT);
          Box := Mainscreen.GetPlayerBox();
          Box := Box.Expand(15);

          // Let's wait if the player needs to run to the cupboard
          if (not Box.Contains(Pt)) then
            WaitEx(2500, 500);

          Wait(125, 250);
        end
      else Antiban.SmallCameraRotation();
    end
  else Antiban.RandomRotate();
end;

function AtTile(Tile: TPoint): Boolean;
begin
  Result := RSW.GetMyPos.DistanceTo(Tile) <= 45;
end;

procedure WalkToStatues();
begin
  RSW.WalkBlind(JoinTile);
  Antiban.DoAntiban();
end;

procedure DepositCoins();
var
  TPA: TPointArray;
  DepositTile: TPoint := [452, 588];
  Pt: TPoint;
begin
  SRL.FindColors(TPA, CTS2(65521, 1, 0.01, 0.01), Mainscreen.Bounds());

  if (TPA.Len() < 1) then
    begin
      RSW.WalkBlind(DepositTile);
      Antiban.SmallCameraRotation();
      SRL.FindColors(TPA, CTS2(65521, 1, 0.01, 0.01), Mainscreen.Bounds());
      if (TPA.Len() < 1) then
        Exit();
    end;

  Pt := SRL.rowp(Mouse.Position(), TPA.Bounds());
  Mouse.HumanMove(Pt);

  if (Mainscreen.IsUpText('Deposit')) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WaitUntil((Inventory.CountItemStack('Coins') < 1), 500, 10000);
    end
  else
    Antiban.RandomRotate();

  // Failsafe so we don't break too long before depositing coins.
  if Inventory.CountItemStack('Coins') < 1 then
    Antiban.DoAntiban();
end;

function GetGoodSlots(): TIntegerArray;
var
  i, j: Int32;
  slots: TBoxArray;
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  if SRL.FindColors(tpa, 65280, Inventory.Bounds()) = 0 then
    Exit;

  atpa := tpa.Cluster(1);
  slots := Inventory.GetSlotBoxes();

  for i := 0 to High(atpa) do
    for j := 0 to High(slots) do
      if atpa[i].Bounds().Contains(slots[j]) then
        Result += j;
end;

procedure AlchItems();
var
  f, t: Int64;
  slots: TIntegerArray;
begin
  f := SRL.NormalRange(1, 3);
  t := SRL.NormalRange(7, 12);
  PrintProgress();
  for f:= f to t do
    begin
      Magic.CastSpell(ERSSPell.HIGH_LEVEL_ALCHEMY);
      WaitUntil(Inventory.IsOpen(), 25, 2000);
      slots := GetGoodSlots();
      if slots.Len() > 0 then Inventory.MouseSlot(slots[0])
      else Inventory.MouseSlot(f);
      if Mainscreen.IsUpText('Coins') then
        begin
          Inc(f);
          Inventory.MouseSlot(f);
        end;
      Wait(25, 75);
      Mouse.Click(MOUSE_LEFT);
      Wait(1625, 1875);
    end;
end;

function ShouldDeposit(): boolean;
var Coins: Int32;
begin
  Coins := Inventory.CountItemStack('Coins');
  if (Coins > 5000) then Exit(true);
  // Every time we have over 2500 coins, there is 5% chance to go for a deposit
  if ((Coins > 2500) and SRL.Dice(5)) then Exit(true);
  Exit(false);
end;

procedure SolveRoom();
var
  GoodItems: TIntegerArray;
  ItemCount: Int32;
begin
  Antiban.DoAntiban(false, false);
  GoodItems := GetGoodSlots();
  ItemCount := GoodItems.Len();
  if (not AtTile(MidTile)) then RSW.WalkBlind(MidTile);
  if (ItemCount > 7) then AlchItems();
  if ShouldDeposit() then DepositCoins()
  else if not Inventory.IsFull() then ClickArrowOnMS()
  else if APROOM.Bounds.Contains(RSW.GetMyPos()) then AlchItems();
end;

begin
  InitiateScript();
  repeat
    begin
      if not RSClient.IsLoggedIn() then Login.LoginPlayer();
      State := GetState();
      case State of
        'MTALOBBY'   : WalkToStatues();
        'INROOM'     : SolveRoom();
        'STATUEAREA' : EnterRoom();
        'UNKNOWN'    : ExitRoom();
      end;
    Wait(150, 350);
    end;
  until false;
end.
