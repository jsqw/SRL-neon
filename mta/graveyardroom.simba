program graveyardroom;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 0;
  Mouse.Speed := SRL.NormalRange(15, 25);
end;

const
  BREAKAFTER  = 40;
  BREAKFOR    = 5;

var
  PEACHES_UNLOCKED: Boolean := False;
  HPToEatAt: Int32 := 60;
  RSW: TRSWalker;
  State: String;
  Timer: TStopwatch;
  StartXP: Int32;
  CurrentXP: Int32;
  GainedXP: Int32 := 0;
  CGROOM: TPointArray := [[696, 391], [952, 390], [952, 650], [692, 648]];
  STATUEAREA: TPointArray := [[258, 86], [280, 86], [291, 96], [290, 116],
                                 [278, 129], [279, 141], [261, 141], [261, 129],
                                 [250, 118], [250, 96]];
  MTALOBBY: TPointArray := [[241, 159], [241, 145], [251, 145], [260, 141],
                                 [268, 141], [275, 141], [283, 143], [297, 145],
                                 [298, 171], [282, 171], [282, 184], [256, 185],
                                 [256, 170], [241, 169]];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn('| MTA v2.0              by n0ll |');
  WriteLn('| The Creature Graveyard        |');
  WriteLn('|-------------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Magic XP       : ', GainedXP);
  WriteLn('| XP/Hour        : ', Round((GainedXP/((GetTimeRunning()/3600))), 2), ' K');
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('|-------------------------------|');
end;

// A custom Keyboard version of Antiban.RandomRotate()
// Rotating with mouse3 doesn't work well with RuneLite
procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.MAGIC, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.LoseFocus);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE);
  Antiban.AddBreak(12 * ONE_HOUR, 4 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Downloader(const URL, Filename: string);
var Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure InitiateScript();
begin
  if (not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png')) then
    Downloader('https://i.imgur.com/yRapvnM.png', AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png');

  RSW.Setup('mta');
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if (GainedXP > t) then
    Timer.Reset();
  if (Timer.ElapsedTime > 300000) then
    TerminateScript('No Gained XP in 5 minutes!');
end;

procedure ClickBonePile();
var
  BoneColor: TCTS2Color := CTS2(1728211, 4, 0.04, 5.89);
  BoneTile: TPoint := [770, 528];
  Slots: Int32;
  Pt: TPoint;
  TPA: TPointArray;
  PBox, Bds: TBox;
  Rect: TRectangle;
begin
  if Mainscreen.IsUpText('Cast') then
    Mouse.Click(MOUSE_LEFT);

  PBox := Mainscreen.GetPlayerBox().Expand(12);
  Rect := RSW.GetTileMs(BoneTile);
  Rect := Rect.Expand(12);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  SRL.FindColors(TPA, BoneColor, Bds);

  if (TPA.Len() > 0) then
    begin
      Pt := TPA.Mean();
      if (Mainscreen.IsUpText('Grab') and (Pbox.Contains(Pt))) then
        begin
          Mouse.Click(MOUSE_LEFT);
          Exit();
        end;
      Mouse.HumanMove(Pt);
      WaitEx(50, 25);
      if Mainscreen.IsUpText('Grab') then
        begin
          Pt := Mouse.Position();
          Mouse.Click(MOUSE_LEFT);
          PBox := Mainscreen.GetPlayerBox();
          PBox := PBox.Expand(15);
          Slots := Inventory.CountEmptySlots();
          if (not PBox.Contains(Pt)) then
            WaitUntil((Slots > Inventory.CountEmptySlots()), 250, 5000);
        end;
    end
  else
    KeyboardRotate();
end;

procedure EnterRoom();
var Rect: TRectangle;
begin
  Rect := RSW.GetTileMS([280, 106]);
  Mouse.HumanMove(Rect.Mean());
  WaitEx(50, 25);
  if Mainscreen.IsUpText('Enter Grave') then
    Mouse.Click(MOUSE_LEFT);
  WaitEx(2500, 500);
end;

procedure DepositFruit();
var
  DepositTile: TPoint := [780, 522];
  DepositColor: TCTS2Color := CTS2(65535, 1, 0.01, 0.01);
  TPA: TPointArray;
  Bds: TBox;
  Rect: TRectangle;
begin
  PrintProgress();

  if Mainscreen.IsUpText('Cast') then
    Mouse.Click(MOUSE_LEFT);

  Rect := RSW.GetTileMs(DepositTile);
  Rect := Rect.Expand(12);
  Bds := Rect.Bounds();
  Bds.LimitTo(Mainscreen.Bounds());
  SRL.FindColors(TPA, DepositColor, Bds);
  if (TPA.Len() > 0) then
    begin
      Mouse.HumanMove(TPA.Mean());
      WaitEx(50, 25);
      if MainScreen.IsUpText('Deposit') then
        begin
          Mouse.Click(MOUSE_LEFT);
          XPBar.WaitXP(2000);
          Antiban.DoAntiban();
          WaitEx(250, 50);
        end;
    end
  else
    KeyboardRotate();
end;

function GetState(): string;
var Pos: TPoint;
begin
  Antiban.DoAntiban(False, False);
  CalculateXP();
  Pos := RSW.GetMyPos();

  if (MTALOBBY.Bounds().Contains(Pos)) then
    Exit('MTALOBBY');
  if (STATUEAREA.Bounds().Contains(Pos)) then
    Exit('STATUEAREA');
  if (CGROOM.Bounds().Contains(Pos)) then
    Exit('CGROOM');

  Exit('UNKNOWN');
end;

function HaveEnoughBones(): Boolean;
var InfoArea: TBox := [7, 300, 40, 331];
begin
  if (SRL.CountColor(CTS0(65280, 0), InfoArea) > 25) then
    Exit(True)
  else
    Exit(False);
end;

procedure WalkToTeleport();
begin
  Antiban.DoAntiban();
  RSW.WalkBlind([272, 106]);
  WaitEx(250, 50);
end;

procedure ConvertBones();
var
  HP: Int32;
begin
  HP := Minimap.GetHPLevel();
  if (PEACHES_UNLOCKED and (HP < HPToEatAt)) then
    begin
      Magic.CastSpell(ERSSpell.BONES_TO_PEACHES);
      WaitUntil(Inventory.IsOpen(), 250, 2500);
      WaitEx(50, 25);
      Inventory.ClickItem('Peach');
    end
  else
    Magic.CastSpell(ERSSpell.BONES_TO_BANANAS);
end;

procedure SolveRoom();
begin
  if Inventory.ContainsAny(['Banana', 'Peach']) then
    DepositFruit()
  else if HaveEnoughBones() then
    ConvertBones()
  else
    ClickBonePile();
end;

begin
  InitiateScript();
  repeat
    begin
      if (not RSClient.IsLoggedIn()) then
        Login.LoginPlayer();
      State := GetState();
      case State of
        'CGROOM'     : SolveRoom();
        'STATUEAREA' : EnterRoom();
        'MTALOBBY'   : WalkToTeleport();
        'UNKNOWN'    : Logout.ClickLogout();
      end;
      WaitEx(50, 25);
    end;
  until false;
end.