program catfisher;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 1;
end;

var
  RSW: TRSWalker;
  State: String;
  Timer: TStopwatch;
  StartXP: Int32;
  CurrentXP: Int32;
  GainedXP: Int32 := 0;
  JunkFish: TRSItemArray := ['Ruined guppy', 'Ruined cavefish', 'Ruined tetra', 'Ruined catfish'];
  RawFish: TRSItemArray := ['Raw guppy', 'Raw cavefish', 'Raw tetra', 'Raw catfish'];
  CookedFish: TRSItemArray := ['Guppy', 'Cavefish', 'Tetra', 'Catfish'];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

// A custom Keyboard version of Antiban.RandomRotate()
// Rotating with mouse3 doesn't work well with RuneLite
procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(500, 1500);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure PrintProgress();
begin
  ClearDebug();
  WriteLn("| Ruins of Camdozaal Fisher v1.1 |");
  WriteLn('| -------------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Gained exp     : ', GainedXP);
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('| Next break     : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('| -------------------------------|');
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.PRAYER, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.LoseFocus);
  Antiban.AddBreak(ONE_MINUTE * 5, ONE_SECOND*10, 0.2, 0);
  Antiban.AddBreak(40 * ONE_MINUTE, 8 * ONE_MINUTE);
  Antiban.AddBreak(12 * ONE_HOUR, 4 * ONE_HOUR);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function InKitchen(): Boolean;
begin
  Result := RSW.GetMyPos.DistanceTo([1098, 3978]) <= 16;
end;

procedure InitiateScript();
begin
  RSW.Setup('world');
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
end;

function IsFishing(): Boolean;
var
  PluginArea: TBox := [15, 25, 160, 50];
  PluginColor: TCTS2Color := CTS2(65280, 1, 0.01, 0.01);
begin
  Result := SRL.CountColor(PluginColor, PluginArea) > 10;
end;

procedure CalculateXP();
var t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if GainedXP > t then Timer.Reset();
  if Timer.ElapsedTime > 300000 then TerminateScript('No Gained XP in 5 minutes!');
end;

function GetTypeCount(Items: TRSItemArray): Int32;
var
  i: Int32;
begin
  for i := 0 to High(Items) do
    if Inventory.ContainsItem(Items[i]) then
    Result := Result+1;
end;

procedure ClickFishSpot();
var
  HLColor: TCTS2Color :=  CTS2(237469, 4, 0.06, 1.00);
  STPA: TPointArray;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Finder: TRSObjectFinder;
begin
  CalculateXP();
  PrintProgress();

  Finder.Colors += HLColor;
  Finder.Grow := 4;
  Finder.ClusterDistance := 4;

  ATPA := MainScreen.FindObject(Finder);
  if ATPA.Len < 1 then
    begin
      RSW.WalkBlind([1086, 3970]);
      Exit();
    end;

  for TPA in ATPA do
    STPA += TPA.Mean();
  STPA.Sort([Mainscreen.GetPlayerBox.Middle.X, Mainscreen.GetPlayerBox.Y2]);
  Mouse.HumanMove(STPA[0]);
  if Mainscreen.IsUpText('Fish') then
  Mouse.Click(MOUSE_LEFT);
  Wait(2000, 4000);
end;

procedure CookFish();
var
  TableLocation: TPoint := [1108, 3970];
  Rect: TRectangle;
  Count: Int32;
begin
  if not InKitchen then
  RSW.WalkBlind([1098, 3978]);

  Rect := RSW.GetTileMS(TableLocation);
  Rect := Rect.Expand(4);

  Mouse.HumanMove(Rect.Bounds.Center());

  if Mainscreen.IsUpText('Prepar') then
    begin
      Mouse.Click(MOUSE_LEFT);
      Count := GetTypeCount(RawFish);
      WaitUntil(Make.IsOpen, 500, 10000);
      Make.Select(0, Make.QUANTITY_ALL, True);
      WaitUntil(Count > GetTypeCount(RawFish), 1000, 40000);
    end
  else KeyboardRotate();
end;

procedure DropJunk();
begin
  Inventory.ShiftDrop(JunkFish, DROP_PATTERN_REGULAR);
end;

procedure OfferFish();
var
  AltarLocation: TPoint := [1114, 3980];
  Count: Int32;
  Rect: TRectangle;
begin
  if not InKitchen then
  RSW.WalkBlind([1098, 3978]);

  Rect := RSW.GetTileMS(AltarLocation);
  Rect := Rect.Expand(4);

  Mouse.HumanMove(Rect.Bounds.Center());

  if Mainscreen.IsUpText('Offer') then
    begin
      Mouse.Click(MOUSE_LEFT);
      Count := GetTypeCount(CookedFish);
      WaitUntil(Make.IsOpen, 500, 10000);
      Make.Select(0, Make.QUANTITY_ALL, True);
      WaitUntil(Count > GetTypeCount(CookedFish), 1000, 40000);
      CalculateXP();
      PrintProgress();
    end
  else KeyboardRotate();
end;

function GetState(): String;
var
  HasRaw: Boolean := False;
  HasCooked: Boolean := False;
  InvFull: Boolean := False;
begin
  if IsFishing then Exit('FISHING');

  if Inventory.ContainsAny(RawFish) then
  HasRaw := True;

  if Inventory.IsFull() then
  InvFull := True;

  if Inventory.ContainsAny(CookedFish) then
  HasCooked := True;

  if HasRaw and HasCooked then
  Exit('COOK_FISH');

  if (not InvFull) and HasRaw then
  Exit('START_FISH');

  if InvFull and HasRaw then
  Exit('COOK_FISH');

  if Inventory.ContainsAny(JunkFish) then
  Exit('DROP_JUNK');

  if HasCooked and (not HasRaw) then
  Exit('OFFER_FISH');

  if not InvFull then
  Exit('START_FISH');

  Exit('UNKNOWN_STATE');
end;

begin
  InitiateScript();
  repeat
    begin
      Antiban.DoAntiban();
      if not RSClient.IsLoggedIn() then Login.LoginPlayer();
      State := GetState();
      case State of
        'FISHING': Wait(2000);
        'DROP_JUNK': DropJunk();
        'START_FISH': ClickFishSpot();
        'COOK_FISH': CookFish();
        'OFFER_FISH': OfferFish();
        'UNKNOWN_STATE': WriteLn('UNKNOWN STATE!');
      end;
      Wait(1000);
    end;
  until false;
end.